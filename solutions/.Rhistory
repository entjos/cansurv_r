method = "pohar-perme")
summary(rssurv, time = c(0:10) * 365.241, scale = 365.241)
})
regmodels
sc2 <- sc2 %>%
mutate(
tt1 = t,                        # original time in days
tt2 = floor(t*365.241)/365.241, # Add some ties in days
tt3 = floor(t*52.177)/52.177,   # weeks
tt4 = floor(t*12)/12,           # months
tt5 = floor(t*4)/4,             # quarters
tt6 = floor(t),
)%>%
select(id, sex, dead, t, agediag, yeardiag, tt1, tt2, tt3, tt4, tt5, tt6)
str(sc2)
regmodels <- lapply(1:6, function(i){
#' select ttn
select_var <- paste0("tt", i)
#' prepare ttn for rs.surv
time_n <- sc2[, select_var] %>%
unlist()
rssurv <- rs.surv(Surv(time  =  time_n *365.241,
event = dead == 1 | dead == 2 ) ~ 1,
rmap = list(age = agediag*365.241, year = yeardiag, sex = sex),
ratetable = popmort_rt,
data = sc2,
method = "pohar-perme")
summary(rssurv, time = c(0:10) * 365.241, scale = 365.241)
})
regmodels
relsurv
relsurv()
?relsurv()
install.packages("prettydoc")
install.packages("remotes")
remotes::install_github("rafalab/excessmort")
install.packages("remotes")
remotes::install_github("rafalab/excessmort")
install.packages("remotes")
remotes::install_github("rafalab/excessmort", force = TRUE)
library(biostat3)
print(lifetab2(Surv(floor(surv_yy), status == "Dead: cancer")~1, colon_sample, breaks=0:10), digits=2)
print(lifetab2(Surv(floor(surv_mm), status == "Dead: cancer")~1, colon_sample, breaks=0:10), digits=2)
print(lifetab2(Surv(floor(surv_mm), status == "Dead: cancer")~1, colon_sample, breaks=0:120), digits=2)
print(lifetab2(Surv(floor(surv_mm), status == "Dead: cancer")~1, colon_sample, breaks=0(12)120), digits=2)
print(lifetab2(Surv(floor(surv_mm), status == "Dead: cancer")~1, colon_sample, breaks=12*(0:120), digits=2)
print(lifetab2(Surv(floor(surv_mm), status == "Dead: cancer")~1, colon_sample, breaks=12*(0:120)), digits=2)
?breaks
??breaks
print(lifetab2(Surv(floor(surv_mm), status == "Dead: cancer")~1, colon_sample, breaks=c(12*(0:120)), digits=2)
print(lifetab2(Surv(floor(surv_yy), status == "Dead: cancer")~1, colon_sample, breaks=0:10), digits=2)
print(lifetab2(Surv(floor(surv_yy), status == "Dead: cancer")~1, colon_sample, breaks=0:10, digits=2)
(lifetab2(Surv(floor(surv_yy), status == "Dead: cancer")~1, colon_sample, breaks=0:10), digits=2)
library(biostat3)
library(biostat3)
print(lifetab2(Surv(floor(surv_yy), status == "Dead: cancer")~1, colon_sample, breaks=0:10), digits=2)
print(lifetab2(Surv(floor(surv_mm), status == "Dead: cancer")~1, colon_sample, breaks=c(12*(0:120))), digits=2)
print(lifetab2(Surv(floor(surv_mm), status == "Dead: cancer")~1, colon_sample, breaks=c(12*(0:120))), digits=2)
print(lifetab2(Surv(floor(surv_mm), status == "Dead: cancer")~1, colon_sample, breaks=c(12*(0:10))), digits=2)
print(lifetab2(Surv(floor(surv_yy), status == "Dead: cancer")~1, colon_sample, breaks=0:10), digits=2)
print(lifetab2(Surv(floor(surv_mm), status == "Dead: cancer")~1, colon_sample, breaks=c(12*(0:10))), digits=2)
print(lifetab2(Surv(floor(surv_yy), status == "Dead: cancer")~1, colon_sample, breaks=0:10), digits=2)
mfit <- survfit(Surv(surv_mm, status == "Dead: cancer") ~ 1, data = colon_sample)
summary(mfit)
## Kaplan-Meier plot
plot(mfit,
ylab="S(t)",
xlab="Time since diagnosis in months",
main = "Kaplan−Meier estimates of cause−specific survival")
print(lifetab2(Surv(floor(surv_yy), status == "Dead: cancer")~1, colon_sample, breaks=0:10), digits=2)
ggsurvplot(
mfit,                     # survfit object with calculated statistics.
data = BRCAOV.survInfo,  # data used to fit survival curves.
risk.table = TRUE,       # show risk table.
pval = TRUE,             # show p-value of log-rank test.
conf.int = TRUE,         # show confidence intervals for
# point estimaes of survival curves.
xlim = c(0,2000),        # present narrower X axis, but not affect
# survival estimates.
break.time.by = 500,     # break X axis in time intervals by 500.
ggtheme = theme_minimal(), # customize plot and risk table with a theme.
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE # show bars instead of names in text annotations
# in legend of risk table
)
ggsurvplot(
mfit,                     # survfit object with calculated statistics.
data = colon_example,  # data used to fit survival curves.
risk.table = TRUE,       # show risk table.
pval = TRUE,             # show p-value of log-rank test.
conf.int = TRUE,         # show confidence intervals for
# point estimaes of survival curves.
xlim = c(0,2000),        # present narrower X axis, but not affect
# survival estimates.
break.time.by = 500,     # break X axis in time intervals by 500.
ggtheme = theme_minimal(), # customize plot and risk table with a theme.
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE # show bars instead of names in text annotations
# in legend of risk table
)
library(survival)
ggsurvplot(
mfit,                     # survfit object with calculated statistics.
data = colon_example,  # data used to fit survival curves.
risk.table = TRUE,       # show risk table.
pval = TRUE,             # show p-value of log-rank test.
conf.int = TRUE,         # show confidence intervals for
# point estimaes of survival curves.
xlim = c(0,2000),        # present narrower X axis, but not affect
# survival estimates.
break.time.by = 500,     # break X axis in time intervals by 500.
ggtheme = theme_minimal(), # customize plot and risk table with a theme.
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE # show bars instead of names in text annotations
# in legend of risk table
)
??ggsurvplot
ggsurvplot
ggkm(
mfit,                     # survfit object with calculated statistics.
data = colon_example,  # data used to fit survival curves.
risk.table = TRUE,       # show risk table.
pval = TRUE,             # show p-value of log-rank test.
conf.int = TRUE,         # show confidence intervals for
# point estimaes of survival curves.
xlim = c(0,2000),        # present narrower X axis, but not affect
# survival estimates.
break.time.by = 500,     # break X axis in time intervals by 500.
ggtheme = theme_minimal(), # customize plot and risk table with a theme.
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE # show bars instead of names in text annotations
# in legend of risk table
)
library("survminer")
install.packages("survminer")
library(survminer)
ggsurvplot(
mfit,                     # survfit object with calculated statistics.
data = colon_example,  # data used to fit survival curves.
risk.table = TRUE,       # show risk table.
pval = TRUE,             # show p-value of log-rank test.
conf.int = TRUE,         # show confidence intervals for
# point estimaes of survival curves.
xlim = c(0,2000),        # present narrower X axis, but not affect
# survival estimates.
break.time.by = 500,     # break X axis in time intervals by 500.
ggtheme = theme_minimal(), # customize plot and risk table with a theme.
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE # show bars instead of names in text annotations
# in legend of risk table
)
library(biostat3)
ggsurvplot(
mfit,                     # survfit object with calculated statistics.
data = colon_example,  # data used to fit survival curves.
risk.table = TRUE,       # show risk table.
pval = TRUE,             # show p-value of log-rank test.
conf.int = TRUE,         # show confidence intervals for
# point estimaes of survival curves.
xlim = c(0,2000),        # present narrower X axis, but not affect
# survival estimates.
break.time.by = 500,     # break X axis in time intervals by 500.
ggtheme = theme_minimal(), # customize plot and risk table with a theme.
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE # show bars instead of names in text annotations
# in legend of risk table
)
ggsurvplot(
mfit,                     # survfit object with calculated statistics.
data = biostat3::colon_example,  # data used to fit survival curves.
risk.table = TRUE,       # show risk table.
pval = TRUE,             # show p-value of log-rank test.
conf.int = TRUE,         # show confidence intervals for
# point estimaes of survival curves.
xlim = c(0,2000),        # present narrower X axis, but not affect
# survival estimates.
break.time.by = 500,     # break X axis in time intervals by 500.
ggtheme = theme_minimal(), # customize plot and risk table with a theme.
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE # show bars instead of names in text annotations
# in legend of risk table
)
ggsurvplot(
mfit,                     # survfit object with calculated statistics.
risk.table = TRUE,       # show risk table.
pval = TRUE,             # show p-value of log-rank test.
conf.int = TRUE,         # show confidence intervals for
# point estimaes of survival curves.
xlim = c(0,2000),        # present narrower X axis, but not affect
# survival estimates.
break.time.by = 500,     # break X axis in time intervals by 500.
ggtheme = theme_minimal(), # customize plot and risk table with a theme.
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE # show bars instead of names in text annotations
# in legend of risk table
)
ggsurvplot(
mfit,                     # survfit object with calculated statistics.
risk.table = TRUE,       # show risk table.
pval = TRUE,             # show p-value of log-rank test.
conf.int = TRUE,         # show confidence intervals for
# point estimaes of survival curves.
xlim = c(0,120),        # present narrower X axis, but not affect
# survival estimates.
ggtheme = theme_minimal(), # customize plot and risk table with a theme.
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE # show bars instead of names in text annotations
# in legend of risk table
)
ggsurvplot(
mfit,                    # survfit object.
risk.table = TRUE,       # show risk table.
conf.int = TRUE,         # show confidence intervals for
xlim = c(0,120),         # present narrower X axis, but not affect
breaks=c(12*(0:10)),
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE # show bars instead of names in text annotations
# in legend of risk table
)
ggsurvplot(
mfit,                    # survfit object.
risk.table = TRUE,       # show risk table.
conf.int = TRUE,         # show confidence intervals for
xlim = (12*(0:10)),         # present narrower X axis, but not affect
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE # show bars instead of names in text annotations
# in legend of risk table
)
ggsurvplot(
mfit,                    # survfit object.
risk.table = TRUE,       # show risk table.
conf.int = TRUE,         # show confidence intervals for
xlim = c(12*(0:10)),         # present narrower X axis, but not affect
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE # show bars instead of names in text annotations
# in legend of risk table
)
ggsurvplot(
mfit,                      # survfit object.
risk.table = TRUE,         # show risk table.
conf.int = TRUE,           # show confidence intervals for
xlim = c(20, 100),       # present narrower X axis, but not affect
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE  # show bars instead of names in text annotations
# in legend of risk table
)
ggsurvplot(
mfit,                      # survfit object.
risk.table = TRUE,         # show risk table.
conf.int = TRUE,           # show confidence intervals for
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE  # show bars instead of names in text annotations
# in legend of risk table
)
ggsurvplot(
mfit,                      # survfit object.
risk.table = TRUE,         # show risk table.
conf.int = TRUE,           # show confidence intervals for
break.time.by = 20         , #
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE  # show bars instead of names in text annotations
# in legend of risk table
)
## Kaplan-Meier plot with risk table
## Load survminer
library(survminer)
ggsurvplot(
mfit,                      # survfit object.
risk.table = TRUE,         # show risk table.
conf.int = TRUE,           # show confidence intervals for
break.time.by = 20       , # numeric value controlling time axis breaks
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE  # show bars instead of names in text annotations
# in legend of risk table
)
## Adjust data & clean data
library(survival)
set.seed(0)
Data <- flchain
View(Data)
Data <- Data[!is.na(Data$creatinine),]
DATA <- Data[Data$End > Data$age,]
Data$End <- Data$age + Data$futime/365 ## age_exist is age+follow-up time (years)
DATA <- Data[Data$End > Data$age,]
names(DATA)[6] <- "FLC"
View(DATA)
Train = DATA[1:500,]
Test = DATA[1000:1020,]
library(LTRCtrees)
install.packages("LTRCtrees")
LTRCART.obj <- LTRCART(Surv(age, End, death) ~ sex + FLC + creatinine, Train)
library(LTRCtrees)
LTRCART.obj <- LTRCART(Surv(age, End, death) ~ sex + FLC + creatinine, Train)
LTRCIT.obj <- LTRCIT(Surv(age, End, death) ~ sex + FLC + creatinine, Train)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
prp(LTRCART.obj, roundint=FALSE)
plot(LTRCIT.obj)
library()
install.packages("partykit")
install.packages("partykit")
install.packages("partykit")
install.packages("partykit")
install.packages("partykit")
install.packages("partykit")
library(partykit)
LTRCART.obj.party <- as.party(LTRCART.obj)
LTRCART.obj.party$fitted[["(response)"]]<- Surv(Train$age, Train$End, Train$death)
plot(LTRCART.obj.party)
library(partykit)
LTRCART.obj.party <- as.party(LTRCART.obj)
LTRCART.obj.party$fitted[["(response)"]] <- Surv(Train$age, Train$End, Train$death)
LTRCART.obj <- LTRCART(Surv(age, End, death) ~ sex + FLC + creatinine, Train)
LTRCIT.obj <- LTRCIT(Surv(age, End, death) ~ sex + FLC + creatinine, Train)
library(LTRCtrees)
LTRCART.obj.party$fitted[["(response)"]] <- Surv(Train$age, Train$End, Train$death)
## Adjust data & clean data
library(survival)
set.seed(0)
## Since LTRCART uses cross-validation to prune the tree, specifying the seed
## guarantees that the results given here will be duplicated in other analyses
Data <- flchain
Data <- Data[!is.na(Data$creatinine),] ## Only keep non-missing
Data$End <- Data$age + Data$futime/365 ## age_exist is age+follow-up time (years)
DATA <- Data[Data$End > Data$age,]     ## Make sure end is >> age
names(DATA)[6] <- "FLC"                ## Just rename column 6
## Setup training set and test set
Train = DATA[1:500,]
Test = DATA[1000:1020,]
## Fit LTRCART and LTRCIT survival tree
library(LTRCtrees)
LTRCART.obj <- LTRCART(Surv(age, End, death) ~ sex + FLC + creatinine, Train)
LTRCIT.obj <- LTRCIT(Surv(age, End, death) ~ sex + FLC + creatinine, Train)
## Putting Surv(End, death) in formula would result an error message
## since both LTRCART and LTRCIT are expecting Surv(time1, time2, event)
## Plot the fitted LTRCART tree using rpart.plot function in rpart.plot[6] package
library(rpart.plot)
prp(LTRCART.obj, roundint=FALSE)
## Plot the fitted LTRCIT tree
plot(LTRCIT.obj)
library(partykit)
LTRCART.obj.party <- as.party(LTRCART.obj)
LTRCART.obj.party$fitted[["(response)"]] <- Surv(Train$age, Train$End, Train$death)
plot(LTRCART.obj.party)
LTRCIT.pred <- predict(LTRCIT.obj, newdata=Test, type = "response")
head(LTRCIT.pred)
LTRCIT.pred <- predict(LTRCIT.obj, newdata=Test, type = "prob")
head(LTRCIT.pred,2)
## Predict relative risk on test set
LTRCART.pred <- predict(LTRCART.obj, newdata=Test)
head(LTRCART.pred)
LTRCART.pred <- Pred.rpart(Surv(age, End, death) ~ sex + FLC + creatinine, Train, Test)
head(LTRCART.pred$KMcurves, 2)  ## list of predicted KM curves
head(LTRCART.pred$Medians)  ## vector of predicted median survival time
library(biostat3)
library(haven)
## Read data
melanoma <- read_dta("melanoma.dta") %>%
filter(stage=="Localised")
melanoma <- read_dta("melanoma.dta") %>%
filter(stage==1)
melanoma <- read_dta("melanoma.dta")
getwd()
getwd("~/cansurv_r/solutions")
setwd("~/cansurv_r/solutions")
melanoma <- read_dta("melanoma.dta") %>%
filter(stage==1)
melanoma <- read_dta("melanoma.dta")%>%
filter(stage==1)
melanoma <- read_dta("melanoma.dta")
melanoma <- melanoma %>%
filter(stage == 1)
melanoma <- filter(stage == 1)
melanoma <- read_dta("melanoma.dta") %>%
filter(stage == 1)
melanoma <- read_dta("melanoma.dta")%>%
filter(stage == 1)
melanoma <- melanoma %>% filter(stage == 1)
melanoma <- melanoma %>%
filter(stage == 1)
library(dplyr)
melanoma <- melanoma %>%
filter(stage == 1)
melanoma <- read_dta("melanoma.dta")%>%
filter(stage == 1)
mfityear8594 <- survfit(Surv(surv_mm, status==1) ~ year8594, data = melanoma)
plot(mfityear8594, col = 1:2,
xlab = "Follow-up Time",
ylab = "Survival",
main = "Kaplan-Meier survival estimates")
legend("bottomleft", levels(melanoma$year8594), col=1:2, lty = 1)
legend("bottomleft", levels(melanoma$year8594), col=1:2, lty = 1)
legend("bottomleft", legend=c(levels(as.factor(melanoma$year8594))), col=1:2, lty = 1)
legend("bottomleft", legend=c(levels(melanoma$year8594)), col=1:2, lty = 1)
legend("bottomleft", legend=c(levels(as.factor(melanoma$year8594))), col=1:2, lty = 1)
## subset of stage 1
melanoma <- read_dta("melanoma.dta")%>%
filter(stage == 1)%>%
mutate(year8594 = ifelse(year8594 == 1, "Diagnosed 85-94", " Diagnosed 75-84"))
mfityear8594 <- survfit(Surv(surv_mm, status==1) ~ year8594, data = melanoma)
plot(mfityear8594, col = 1:2,
xlab = "Follow-up Time",
ylab = "Survival",
main = "Kaplan-Meier survival estimates")
legend("bottomleft", legend=c(levels(as.factor(melanoma$year8594))), col=1:2, lty = 1)
## Read data
## subset of stage 1
melanoma <- read_dta("melanoma.dta")%>%
filter(stage == 1)%>%
mutate(year8594 = ifelse(year8594 == 1, "Diagnosed 85-94", "Diagnosed 75-84"))
#' stage (Clinical stage at diagnosis) is coded as follows
#' 0 [Unknown]
#' 1 [Localised]
#' 2 [Regional]
#' 3 [Distant]
#' status is coded as follows
#' 1 [Dead: cancer]
#' 2 [Dead: other]
#' 0 [Alive]
#' 4 [Lost to follow-up]
#' year8504 is coded as follows
#' 1 [Diagnosed 75-84]
#' 0 [Diagnosed 85-94]
##(a) Kaplan-Meier by calendar time
mfityear8594 <- survfit(Surv(surv_mm, status==1) ~ year8594, data = melanoma)
plot(mfityear8594, col = 1:2,
xlab = "Follow-up Time",
ylab = "Survival",
main = "Kaplan-Meier survival estimates")
legend("bottomleft", legend=c(levels(as.factor(melanoma$year8594))), col=1:2, lty = 1)
plot(muhaz2(Surv(surv_mm,status==1)~year8594, data=melanoma))
legend("topright")
plot(muhaz2(Surv(surv_mm,status==1)~year8594, data=melanoma))
legend("topright")
legend("topright", legend=c(levels(as.factor(melanoma$year8594))), col=1:2, lty = 1)
##(b) Hazard function
plot(muhaz2(Surv(surv_mm,status==1)~year8594, data=melanoma))
legend("topright", legend=c(levels(as.factor(melanoma$year8594))), col=1:2, lty = 1)
plot(muhaz2(Surv(surv_mm,status==1)~year8594, data=melanoma), legend=c(levels(as.factor(melanoma$year8594))))
plot(muhaz2(Surv(surv_mm,status==1)~year8594, data=melanoma), legend("topright", legend=c(levels(as.factor(melanoma$year8594))), col=1:2, lty = 1))
plot(muhaz2(Surv(surv_mm,status==1)~year8594, data=melanoma),
legend.args= NULL)
plot(muhaz2(Surv(surv_mm,status==1)~year8594, data=melanoma),
legend.args= NULL)
plot(muhaz2(Surv(surv_mm,status==1)~year8594, data=melanoma))
survdiff(Surv(surv_mm, status==1) ~ year8594, data=melanoma)
survdiff(Surv(surv_mm, status==1) ~ year8594, data=melanoma, rho=1)
##(d) Estimate mortality rates
survRate(Surv(surv_mm/1000, status==1)~year8594, data=melanoma)
survRate(Surv(surv_mm/1000, status==1)~agegrp, data=melanoma)
survRate(Surv(surv_mm/1000, status==1)~agegrp, data=melanoma)
mfit_agegrp <- survfit(Surv(surv_mm, death_cancer) ~ agegrp, data = melanoma)
plot(mfit_agegrp, col = 1:4,
xlab = "Months since diagnosis",
ylab = "Survival",
main = "Kaplan-Meier survival estimates")
legend("bottomleft", legend=c(levels(as.factor(levels(melanoma$agegrp)))), col=1:4, lty = 1)
mfit_agegrp <- survfit(Surv(surv_mm,  status==1) ~ agegrp, data = melanoma)
plot(mfit_agegrp, col = 1:4,
xlab = "Months since diagnosis",
ylab = "Survival",
main = "Kaplan-Meier survival estimates")
legend("bottomleft", legend=c(levels(as.factor(levels(melanoma$agegrp)))), col=1:4, lty = 1)
legend("bottomleft", legend=c(levels(as.factor(levels(melanoma$agegrp)))), col=1:4, lty = 1)
legend("bottomleft", legend=c(as.factor(levels(melanoma$agegrp))), col=1:4, lty = 1)
legend("bottomleft", legend=c(levels(as.factor(melanoma$agegrp))), col=1:4, lty = 1)
legend("bottomright", legend=c(levels(as.factor(melanoma$agegrp))), col=1:4, lty = 1)
plot(mfit_agegrp, col = 1:4,
xlab = "Months since diagnosis",
ylab = "Survival",
main = "Kaplan-Meier survival estimates")
legend("bottomright", legend=c(levels(as.factor(melanoma$agegrp))), col=1:4, lty = 1)
mfit_agegrp <- survfit(Surv(surv_mm,  status==1) ~ agegrp, data = melanoma)
plot(mfit_agegrp, col = 1:4,
xlab = "Months since diagnosis",
ylab = "Survival",
main = "Kaplan-Meier survival estimates")
legend("bottomright", legend=c(levels(as.factor(melanoma$agegrp))), col=1:4, lty = 1)
legend("bottomleft", legend=c(levels(as.factor(melanoma$agegrp))), col=1:4, lty = 1)
mfit_agegrp_year <- survfit(Surv(surv_mm/12, status==1) ~ agegrp, data = melanoma)
plot(mfit_agegrp_year, col = 1:4,
xlab = "Years since diagnosis",
ylab = "Survival",
main = "Kaplan-Meier survival estimates")
legend("bottomleft", legend=c(levels(as.factor(melanoma$agegrp))), col=1:4, lty = 1)
survRate(Surv(surv_mm/12/1000, status==1)~agegrp, data=melanoma)
survRate(Surv(surv_mm/1000, status==1)~agegrp, data=melanoma)
## Be aware of the unit: per 1000 person-years
survRate(Surv(surv_mm/12/1000, status==1)~agegrp, data=melanoma)
survRate(Surv(surv_mm/12/1000, status==1)~agegrp, data=melanoma)
mfit_sex <- survfit(Surv(surv_mm, status==1) ~ sex, data = melanoma)
plot(mfit_sex, col = 1:2,
xlab = "Months since diagnosis",
ylab = "Survival",
main = "Kaplan-Meier survival estimates")
legend("bottomright", legend=c(levels(as.factor(melanoma$sex))), col=1:2, lty = 1)
mfit_sex <- survfit(Surv(surv_mm, status==1) ~ sex, data = melanoma)
plot(mfit_sex, col = 1:2,
xlab = "Months since diagnosis",
ylab = "Survival",
main = "Kaplan-Meier survival estimates")
legend("bottomright", legend=c(levels(as.factor(melanoma$sex))), col=1:2, lty = 1)
plot(muhaz2(mfit_sex))
plot(muhaz2(Surv(surv_mm, status==1) ~ sex, data = melanoma))
survdiff(Surv(surv_mm, status==1) ~ sex, data=melanoma)
survdiff(Surv(surv_mm, status==1) ~ sex, data=melanoma)
survdiff(Surv(surv_mm/1000, status==1) ~ sex, data=melanoma)
survRate(Surv(surv_mm/1000, status==1) ~ sex, data=melanoma)
survdiff(Surv(surv_mm/1000, status==1) ~ sex, data=melanoma)
source('~/cansurv_r/solutions/q104.R', echo=TRUE)
source('~/cansurv_r/solutions/q104.R', echo=TRUE)
